name: IaC Terraform Automation pipeline
on:
  workflow_dispatch:

env:
  TERRAFORM_DIR: terraform
  ANSIBLE_DIR: ansible

jobs:
  config_formatting:
    runs-on: ubuntu-latest
    steps:
      - name: Repo content download
        uses: actions/checkout@v4
      - name: Terraform setup
        uses: hashicorp/setup-terraform@v3
      - name: Formatting
        run: terraform fmt -recursive
        working-directory: ${{ env.TERRAFORM_DIR }}
      
  plan:
    runs-on: ubuntu-latest
    needs: config_formatting
    env:
      GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
      GCP_JSON_SA_KEY: ${{ secrets.GCP_JSON_SA_KEY }}
    steps:
      - name: Repo content download
        uses: actions/checkout@v4

      - name: Terraform setup
        uses: hashicorp/setup-terraform@v3

      - name: Authenticate to GCP
        uses: 'google-github-actions/auth@v3'
        with:
          credentials_json: ${{ env.GCP_JSON_SA_KEY }}

      - name: Save SSH keys to the local path
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/terraform_gce_key
          echo "${{ secrets.SSH_PUBLIC_KEY }}" > ~/.ssh/terraform_gce_key.pub
          chmod 600 ~/.ssh/terraform_gce_key
          chmod 600 ~/.ssh/terraform_gce_key.pub
      
      - name: Prepare .tfvars file
        run: |
          export TF_VAR_project_id="${{ secrets.project_id }}"
          export TF_VAR_db_password="${{ secrets.db_password }}"
          export TF_VAR_db_username="${{ secrets.db_username }}"
          export TF_VAR_region="europe-west1"
          export TF_VAR_cp_zone_for_mig="europe-west1-b"
          
      - name: Terraform init
        run: terraform init
        working-directory: ${{ env.TERRAFORM_DIR }}

      - name: Validating
        run: terraform validate
        working-directory: terraform

      - name: Terraform plan
        run: terraform plan -out=tfplan
        working-directory: ${{ env.TERRAFORM_DIR }} 

      - name: Plan file artifact upload
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: ${{ env.TERRAFORM_DIR }}/tfplan

  apply:
    runs-on: ubuntu-latest
    needs: plan
    environment: production-tf-apply
    env:
      GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
      GCP_JSON_SA_KEY: ${{ secrets.GCP_JSON_SA_KEY }}
    outputs:
      terraform_result: ${{ steps.apply_terraform.outputs.result }}
    steps:
      - name: Repo content download
        uses: actions/checkout@v4

      - name: Terraform setup
        uses: hashicorp/setup-terraform@v3

      - name: Authenticate to GCP
        uses: 'google-github-actions/auth@v3'
        with:
          credentials_json: ${{ env.GCP_JSON_SA_KEY }}

      - name: Save SSH keys to the local path
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/terraform_gce_key
          echo "${{ secrets.SSH_PUBLIC_KEY }}" > ~/.ssh/terraform_gce_key.pub
          chmod 600 ~/.ssh/terraform_gce_key
          chmod 600 ~/.ssh/terraform_gce_key.pub

      - name: Terraform init
        run: terraform init
        working-directory: ${{ env.TERRAFORM_DIR }}

      - name: Plan file artifact download
        uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: ${{ env.TERRAFORM_DIR }}

      - name: Apply from the plan
        run: terraform apply -auto-approve tfplan
        working-directory: ${{ env.TERRAFORM_DIR }}

      - name: Output data
        id: apply_terraform
        run: |
          result=$( terraform output -json | jq -c )
          echo "$result
          echo "result=${result}" >> $GITHUB_OUTPUT
        working-directory: ${{ env.TERRAFORM_DIR }}

  ansible-config:
    runs-on: ubuntu-latest
    needs:
      - apply
    environment: production-ansible
    steps:
      - name: Repo content download
        uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          sudo apt update && sudo apt install -y python3-pip sshpass
          pip3 install ansible
      
      - name: Save SSH keys to the local path
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/terraform_gce_key
          echo "${{ secrets.SSH_PUBLIC_KEY }}" > ~/.ssh/terraform_gce_key.pub
          chmod 600 ~/.ssh/terraform_gce_key
          chmod 600 ~/.ssh/terraform_gce_key.pub

      - name: Test Inventory
        run: |
          echo "Inventory ansible/inventory:"
          cat ansible/inventory.ini
          echo ${{ needs.apply.outputs.terraform_result }} > ansible/temp.json
          echo "Inventory ansible/temp.json"
          cat ansible/temp.json


      - name: Run Ansible Playbook
        run: |
          chmod +x ${{ env.ANSIBLE_DIR }}/dynamic_inventory.sh
          ./${{ env.ANSIBLE_DIR }}/dynamic_inventory.sh ${{ needs.apply.outputs.terraform_result }}
          ansible-playbook -i ./${{ env.ANSIBLE_DIR }}/inventory.ini ${{ env.ANSIBLE_DIR }}/main_playbook.yml

  destroy:
    runs-on: ubuntu-latest
    environment: production-tf-destroy
    env:
      GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
      GCP_JSON_SA_KEY: ${{ secrets.GCP_JSON_SA_KEY }}
    steps:
      - name: Repo content download
        uses: actions/checkout@v4
      - name: Terraform setup
        uses: hashicorp/setup-terraform@v3
      - name: Authenticate to GCP
        uses: 'google-github-actions/auth@v3'
        with:
          credentials_json: ${{ env.GCP_JSON_SA_KEY }}
      - name: Save SSH keys to the local path
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/terraform_gce_key
          echo "${{ secrets.SSH_PUBLIC_KEY }}" > ~/.ssh/terraform_gce_key.pub
          chmod 600 ~/.ssh/terraform_gce_key
          chmod 600 ~/.ssh/terraform_gce_key.pub
      - name: Terraform init
        run: terraform init
        working-directory: ${{ env.TERRAFORM_DIR }}
      - name: Destroy infrastructure
        run: terraform destroy -auto-approve
        working-directory: ${{ env.TERRAFORM_DIR }}